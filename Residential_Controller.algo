'--- Parameters ---'
"Inventory
	NumberOfColumn = 1
	NumberOfElevators = 2
	NumberOfFloors = 10	

Parameters for each Elevator[1-2]	
	ID
	State 							(Move or IDLE THEN)
	Position = 0
	Direction						(up : TRUE ir down : FALSE)
	StopList [1 - NumberOfFloors]	(it contains all the floors. 0 or 1. 1 for stop)
	FloorRequestButton   			(A number in the range (1-10) AND which determin the desination Floor )
	Door							(closed or Open )
	Buffer   						(save the call requests to reach when it changes direction or become IDLE THEN)
		Direction
		List
	
Parameters for each User
	UserPosition
	UserDirection 

Parameters for each Floor [1-10] 
	number	
	CallButton	

GoodElevators[] is a list of Elevators"
'--- /Parameters ---'


'--- --- Main Program --- ---'
"--- CALL BUTTON PRESSED --- "
SEQUENCE
	WHILE operating DO
		CALL Listen  RETURNING (UserPosition AND UserDirection)
		CALL FindElevator WITH (UserPosition AND UserDirection) RETURNING ElevatorID
		CALL Move WITH (ElevatorID)
	ENDWHILE
END SEQUENCE 
"--- /CALL BUTTON PRESSED --- "
'--- --- /Main Program --- ---'



'--- --- SEQUENCEs Declaration--- ---'
SEQUENCE Listen
	SET UserPosition = NULL
	SET UserDirection = NULL
	SET Floor to 1
	FOR all the floors DO
		IF (there is elevator call in this Floor) THEN
			SET UserPosition to Floor
			SET UserDirection to CallButton value
			RETURN (UserPosition AND UserDirection)
		ENDIF
		INCREMENT Floor by 1
	ENDFOR																	
END SEQUENCE 

SEQUENCE FindElevator USING (UserPosition AND UserDirection)
"Find elevatyor - Phase 1"
	EMPTY GoodElevators list
	EMPTY BadElevators list
	FOR EACH Elevator in elevator list
		IF (Elevator and user are at the same Position AND have same Direction ) THEN
			IF (ElevatorDoor is Open) THEN
				CALL UpdateList WITH (ElevatorStopList AND UserPosition) 
			RETURN 
			ENDIF
		ELSE IF (Elevator and user both go Up AND Elevator is below the user) OR (Elevator and user both go Down AND Elevator is above the user) THEN
			ADD ElevatorID TO the GoodElevators list
		ELSE IF (Elevator is IDLE) THEN
			ADD ElevatorID TO the GoodElevators list
		ELSE
			ADD ElevatorID to BadElevators List
		ENDIF
	ENDFOR
	IF GoodElevators list is NOT Empty Then
		"--- FIND THE CLOSEST ELEVATOR WITH SHORTEST STOP LIST AMONG THE GOOD ELEVATORS"
		CALL FindClosestElevatorWithShortestList WITH (GoodElevators list AND UserPosition) RETURNING ElevatorID
		"Then knwoing the ID of the elevator we can find it and update its Stoplist"
		CALL UpdateList WITH (ElevatorStopList AND UserPosition) 
		RETURN
	ELSE
		CALL FindClosestElevatorWithShortestList WITH (BadElevators List AND UserPosition) RETURNING ElevatorID
		CALL UpdateList WITH (Buffer.List of Elevator[ID] AND UserPosition)
		SET BufferListDireciton of this Elevator[ID] to UserDirection
		RETURN
	ENDIF	
END SEQUENCE 

SEQUENCE FindElevator_Phase2 USING (ElevatorList AND UserPosition)
"Selecting the Nearest Elevator who has the shortest list"
	SET z to NumberOfFloors
	SET l to NumberOfFloors
	FOR EACH Elevator
		IF the distance between elevatoer and the user is SMALLER than z THEN
			IF Elevator stoplist is shorter than or equal to l THEN
				set z to the distance between elevatoer and the user
				set l to length of Elevator stoplist
				SET GoodElevator to Elevator ID
			ENDIF
		ENDIF
	ENDFOR	
	RETURN x as the selected Elevator ID
END SEQUENCE

"--- put the new stop at the beginning of the list and sort the list"
SEQUENCE UpdateList USING (ElevatorStopList AND UserPosition)			
	push UserPosition into the ElevatorStopList and sort the list
END SEQUENCE 

SEQUENCE Move USING (ElevatorID)
	CALL SecurityCheck WITH (ElevatorID)
	IF (next stop in the ElevatorStopList is greater than the current ElevatorPosition) Then
		CALL MoveUp WITH (ElevatorID)
	ELSE
		CALL MoveDown WITH (ElevatorID)
	ENDIF
END SEQUENCE 

SEQUENCE MoveUp USING (ElevatorID)
	REPEAT
		CLOSE the door of the Elevator
		INCREMENT ElevatorPosition by 1
"--- The first destination is the first Floor in the Stoplist. It will then be remvoed as eleavtor arrives to the floor."		
		IF Elevator Position is equal to the FIRST Floor in the StopList THEN
			stop Elevator
			Open the Door
			remove the this Floor from the StopList
			wait 5 seconds 
			IF (ElevatorFloorRequestButton == PRESSED) AND (PRESSED button is greater than the current Floor) THEN
				CALL FloorRequestButtonPressed WITH (ElevatorID AND UP)
			ENDIF
		ENDIF
	UNTIL (the end of the StopList OR arriving to the last floor)
	IF the BufferList is NOT EMPTY THEN
		SET ElevatorStopList TO BufferList
		SET ElevatorDirection TO Buffer.Direction
		EMPTY BufferList
		CALL Move WITH (ElevatorID)
	ELSE
		CHANGE ElevatorState TO IDLE THEN
	ENDIF
END SEQUENCE 

SEQUENCE MoveDown USING (ElevatorID)
	REPEAT
		CLOSE the door of the Elevator
		DECREASE Elevator Position by 1
		IF Elevator Position is equalt to the LAST FLOOR in the StopList THEN
			stop Elevator
			Open the Door
			remove the last Floor of the StopList
			wait 5 seconds
			IF (ElevatorFloorRequestButton == PRESSED) AND (PRESSED button is smaller than the current Floor) THEN
				CALL FloorRequestButtonPressed WITH (ElevatorID AND Down)
			ENDIF
		ENDIF
	UNTIL (the end of the StopList OR arriving to the first Floor)
	IF the BufferList is NOT EMPTY THEN
		SET ElevatorStopList TO BufferList
		SET ElevatorDirection TO Buffer.Direction
		EMPTY BufferList
		CALL Move WITH (ElevatorID)
	ELSE
		CHANGE ElevatorState TO IDLE THEN
		ENDIF
	ENDIF
END SEQUENCE 

SEQUENCE FloorRequestButtonPressed USING (ElevatorID AND Direction) 
	IF (Elevator Direction is UP AND User desination is GREATER than the current floor)  THEN
		CALL UpdateList WITH (ElevatorStopList AND FloorRequestButton)
		RETURN
	ELSE IF (Elevator Direction is Down AND User desination is SMALLER than the current floor) THEN
		CALL UpdateList WITH (Elevator[ElevatorID].StopList AND FloorRequestButton)
		RETURN
	ENDIF
END SEQUENCE 

SEQUENCE SecurityCheck USING (ElevatorID)
    SET DoorCheck to FALSE
    SET WeightCheck to FALSE
    REPEAT
        IF (there is an obstable infront of the door sensor) THEN
            BEEP!
        ELSE
            SET DoorCheck to TRUE
        ENDIF

        IF (the total weight is greater than the elevator capacity) THEN
            BEEP!
        ELSE
            SET WeightCheck to TRUE
        ENDIF
    UNTIL DoorCheck and WeightCheck are TRUE
END SEQUENCE

'--- --- /SEQUENCEs Declaration--- ---'